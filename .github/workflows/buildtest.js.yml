name: Build, Test, and Deploy to Docker Hub

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Job 1: Build
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build --if-present  # Si tienes un proceso de build en tu proyecto

  # Job 2: Test
  test:
    needs: build  # Esto asegura que el test solo se ejecute si el build fue exitoso
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      # Paso adicional: Otorgar permisos a Mocha si lo necesitas
      - name: Grant permission to Mocha
        run: chmod +x ./node_modules/.bin/mocha

      - name: Run tests
        run: npm test

  # Job 3: Docker Delivery
  delivery:
    needs: test  # Esto asegura que el job de delivery solo se ejecute después de que el test sea exitoso
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/infosec-chat:latest .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/infosec-chat:latest

  # Job 4: Scan Docker Image for Vulnerabilities
  scan:
    needs: delivery  # Asegura que el escaneo se ejecute después de que la imagen Docker se haya creado
    runs-on: ubuntu-latest
    steps:
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.56.2_Linux-64bit.deb  # Actualiza esta línea a la versión correcta
          sudo dpkg -i trivy_0.56.2_Linux-64bit.deb
          trivy --version  # Verifica la instalación

      - name: Scan Docker image with Trivy
        run: trivy image ${{ secrets.DOCKER_USERNAME }}/infosec-chat:latest

  # Job 5: CodeQL (SAST - Static Code Analysis)
  codeql:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      security-events: write
    strategy:
      matrix:
        language: [ 'javascript' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Job 6: Deploy to Azure Web App
  deploy:
    needs: delivery  # Asegura que este job solo se ejecute después de que el trabajo 'delivery' se complete con éxito.
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: unachattt  # Cambia esto por el nombre de tu aplicación en Azure
          images: ${{ secrets.DOCKER_USERNAME }}/infosec-chat:latest  # Imagen Docker que se creó en el paso anterior

  # Job 7: Deploy to Staging Environment
  staging:
    needs: deploy  # Asegura que este job solo se ejecute después de que el trabajo 'deploy' se complete con éxito.
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Staging Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: unachattt-staging  # Cambia esto por el nombre de tu aplicación en el entorno de staging
          images: ${{ secrets.DOCKER_USERNAME }}/infosec-chat:latest  # Imagen Docker que se creó en el paso anterior

  # Job 8: Run Nuclei Scanning
  nuclei:
    needs: staging  # Asegura que el escaneo de Nuclei se ejecute después del despliegue en staging.
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Nuclei
      run: |
        sudo apt-get update
        sudo apt-get install -y wget unzip
        wget https://github.com/projectdiscovery/nuclei/releases/download/v3.3.5/nuclei_3.3.5_linux_amd64.zip
        unzip nuclei_3.3.5_linux_amd64.zip
        sudo mv nuclei /usr/local/bin/
        nuclei -version  # Verifica la instalación

    - name: Run Nuclei scans
      run: |
        nuclei -u https://unachattt-staging-c9h6drg5gnf3b0ed.canadacentral-01.azurewebsites.net/ -t ./nuclei-templates
